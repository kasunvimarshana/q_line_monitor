<!-- html5 data -->
<script>
var div = $( "div" )[ 0 ];
jQuery.data( div, "test", {
  first: 16,
  last: "pizza!"
});
$( "span:first" ).text( jQuery.data( div, "test" ).first );
$( "span:last" ).text( jQuery.data( div, "test" ).last );
</script>

<script>
<!-- jquery get -->
$.get( "test.php", function( data ) {
  $( "body" )
    .append( "Name: " + data.name ) // John
    .append( "Time: " + data.time ); //  2pm
}, "json" );

<!-- jquer get -->
$.get( "test.cgi", { name: "John", time: "2pm" } )
  .done(function( data ) {
    alert( "Data Loaded: " + data );
  });
</script>

<script>
var me = {
  type: "zombie",
  test: function( event ) {
    // Without proxy, `this` would refer to the event target
    // use event.target to reference that element.
    var element = event.target;
    $( element ).css( "background-color", "red" );
 
    // With proxy, `this` refers to the me object encapsulating
    // this function.
    $( "#log" ).append( "Hello " + this.type + "<br>" );
    $( "#test" ).off( "click", this.test );
  }
};
 
var you = {
  type: "person",
  test: function( event ) {
    $( "#log" ).append( this.type + " " );
  }
};
 
// Execute you.test() in the context of the `you` object
// no matter where it is called
// i.e. the `this` keyword will refer to `you`
var youClick = $.proxy( you.test, you );
 
// attach click handlers to #test
$( "#test" )
  // this === "zombie"; handler unbound after first click
  .on( "click", $.proxy( me.test, me ) )
 
  // this === "person"
  .on( "click", youClick )
 
  // this === "zombie"
  .on( "click", $.proxy( you.test, me ) )
 
  // this === "<button> element"
  .on( "click", you.test );
  </script>
  
<script>
	var arr = [ 1, 9, 3, 8, 6, 1, 5, 9, 4, 7, 3, 8, 6, 9, 1 ];
	$( "div" ).text( arr.join( ", " ) );

	arr = jQuery.grep(arr, function( n, i ) {
	  return ( n !== 5 && i > 4 );
	});
	$( "p" ).text( arr.join( ", " ) );

	arr = jQuery.grep(arr, function( a ) {
	  return a !== 9;
	});

	$( "span" ).text( arr.join( ", " ) );
</script>

<script>
	jQuery.type( undefined ) === "undefined"
	jQuery.type() === "undefined"
	jQuery.type( window.notDefined ) === "undefined"
	jQuery.type( null ) === "null"
</script>

<script>
	(function($) {
		$.fn.helloWorld = function() {
			this.each( function() {
				$(this).text("Hello, World!");
			});
		}
	}(jQuery));
</script>